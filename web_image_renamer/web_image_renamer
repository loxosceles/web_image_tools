#!/usr/bin/env python
"""
Web Image Renamer

Rename a every image file inside a given folder and its subfolders. The resulting
image name will be showing the folder hierarchy in which the files are living.
Example: ./folder1/subfolder 1/image.png will rename all files under 'subfolder' into
folder1__subfolder_1-image.png.

Spaces will be taken, also within folder names. The path can be given explicitly
deeper inside the folder hierarchy and only files under the specified folder will be considered.
Example: web_image_renamer folder1/subfolder\ 1 will only consider files under
'subfolder', any image files under 'folder1' will not be renamed. 
"""
from os import rename, path, walk
import sys

root_dir = './' # default
ext = ['JPG', 'jpg', 'png', 'PNG', 'TIFF', 'tiff']

def rename_files(directory=root_dir):
    """
    Walk through a directory and renames every file prepending 
    folder hierarchy.
    """
    for root, dirs, files in walk(directory, topdown='true'):
        files = filter_ext(ext, files, root)
        root = normalize_path(root)

        for file in files:
            pd_name = transform_path(root)
            new_name = './' + root + '/' + pd_name + '-'

            if not file.startswith(new_name):
                rename(file, new_name +\
                    path.split(file)[1])

def transform_path(p):   
    """ 
    Take a path and transform it into a form suitable 
    for a file name.
    """
    p = p.replace(' ', '_')
    cf = get_parent_folder('./') 
    return cf + '__' + p.replace('/', '__')

def normalize_path(s):
    """
    Take care of leading and trailing slashes as well as 
    the './' case. Any slash or dot-slash at the beginning 
    or end will be stripped.
    """
    s =  '/' + s.lstrip('.').strip('/')
    return s.strip('/')

def get_parent_folder(p):
    return path.abspath(p).replace(' ', '_').split('/')[-1]

def filter_ext(ext_list, file_list, parentdir):
    """ 
    Add relative path to files and filter for allwed 
    extentions.
    """
    for filename in file_list:
        filename = path.join(parentdir, filename) 
        if filename.endswith(tuple(ext_list)):
            yield filename

if __name__ == "__main__":

    #import pdb; pdb.set_trace()

    if len(sys.argv) > 2:
        print("Taking at most one argument")
        sys.exit(1)
    elif len(sys.argv) == 2:
        rename_files(sys.argv[1])
    else:
        rename_files()

